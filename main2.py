from app.config import config
import logging
from aiogram import Bot, Dispatcher, executor, types
from count import get_data

API_TOKEN = config.TOKEN

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """

    welcome_message = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç —Ç–≤–æ–π –¥–æ–ª–≥. \n" \
                      "–í—ã–∑–æ–≤–∏ –∫–æ–º–∞–Ω–¥—É '/count', —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ç—ã –∑–∞–¥–æ–ª–∂–∞–ª–∞ –ò–≤–∞–Ω—É üòä\n" \
                      "(–∫–∞—Å–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –∫–∞–ø–∞—é—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã)"
    await message.reply(welcome_message)


@dp.message_handler(commands=['count'])
async def send_welcome(message: types.Message):
    data = get_data()
    await message.reply(f"–û–±—â–∏–π –¥–æ–ª–≥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {data['main_debt']}\n"
                        f"–°—É–º–º–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤: {data['every_day_fee']}\n"
                        f"–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ä–∞—Å—á–µ—Ç: '/count'\n"
                        )

# @dp.message_handler()
# async def echo(message: types.Message):
#     # old style:
#     # await bot.send_message(message.chat.id, message.text)
#
#     await message.answer(message.text)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)


